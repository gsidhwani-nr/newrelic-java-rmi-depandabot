name: Build and Release

on:
  push:
    branches:
      - main
  repository_dispatch:
    types:
      - manual-release

jobs:
  build-and-release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up JDK 8
        uses: actions/setup-java@v1
        with:
          java-version: 8

      - name: Build with Gradle
        run: ./gradlew build

      - name: Upload Release Artifacts
        uses: actions/upload-artifact@v2
        with:
          name: release-artifacts
          path: build/libs/*.jar

      - name: Set Tag
        id: set_tag
        run: echo "::set-output name=tag::v${{ github.run_number }}"

      - name: Generate Changelog
        id: generate_changelog
        run: |
          echo "Generating changelog..."
          previous_tag=$(git describe --abbrev=0 --tags HEAD^ 2>/dev/null || git rev-list --max-parents=0 HEAD)
          changelog=$(git log --pretty=format:"- %s (%h)" $previous_tag..HEAD)
          echo "::set-output name=changelog::$changelog"

      - name: Create Release
        uses: actions/github-script@v3
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const core = require('@actions/core');
            const github = require('@actions/github');

            const changelog = `Release Changelog:\n\n${{ steps.generate_changelog.outputs.changelog }}`;
            const tag = `v${{ needs.build.outputs.tag }}`;

            const octokit = github.getOctokit(process.env.NEWRELIC_BUILD_TOKEN);

            const createReleaseResponse = await octokit.rest.repos.createRelease({
              owner: github.context.repo.owner,
              repo: github.context.repo.repo,
              tag_name: tag,
              name: tag,
              body: changelog,
              draft: false,
              prerelease: false
            });

            core.info(`Release published: ${createReleaseResponse.data.html_url}`);
