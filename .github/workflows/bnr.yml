name: Build and Release

on:
  push:
    branches:
      - main

jobs:
  build-and-release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Set up JDK 8
        uses: actions/setup-java@v1
        with:
          java-version: 8
          
      - name: Set Major Release
        id: major
        run: |
          echo "Setting Extensions Dir..."
          echo "MAJOR=1" >> $GITHUB_ENV
          
      - name: Set Extensions Dir
        id: set_ext_dir
        run: |
          echo "Setting Extensions Dir..."
          mkdir ${HOME}/release
          mkdir /tmp/to
          echo "NEW_RELIC_EXTENSIONS_DIR=${HOME}/release" >> $GITHUB_ENV
        
      - name: Build with Gradle and verifyInstrumentation
        run: | 
          ./gradlew build install verifyInstrumentation

      - name: Set release version
        id: set_release_version
        run: |
          major_version=1
          minor_version=0
          echo "Step1" 
          # Retrieve the latest release tag
          latest_tag=$(git describe --abbrev=0 --tags 2>/dev/null)
          echo "Step2" 
          if [[ -n "$latest_tag" && $latest_tag == v* ]]; then
            # Extract the major and minor versions from the latest tag
            current_major_version=$(echo $latest_tag | cut -d'.' -f1 | sed 's/v//')
            current_minor_version=$(echo $latest_tag | cut -d'.' -f2)
            echo "Step3" 
            # Increment the minor version if it's less than 9
            if [[ $current_minor_version -lt 9 ]]; then
              minor_version=$((current_minor_version + 1))
            else
              # Increment the major version and reset the minor version to 0
              major_version=$((current_major_version + 1))
              minor_version=0
            fi
          fi

          # Set the release version environment variable
          release_version="v${major_version}.${minor_version}"
          echo "RELEASE_VERSION=${release_version}" >> $GITHUB_ENV
          
      - name: Set Tag
        id: set_tag
        run: echo "::set-output name=tag::${{ env.RELEASE_VERSION }}"
        
      - name: Set release name
        id: set_release_name
        run: |
          repo_name="${{ github.repository }}"
          sanitized_repo_name=$(echo "$repo_name" | awk -F 'newrelic-java-' '{print $2}')
          echo "RELEASE_NAME=${sanitized_repo_name}-instrumentation-" >> $GITHUB_ENV
        
      - name: Create Archive
        run: |
          echo "CURRENT=${PWD}" >> $GITHUB_ENV
          cd ${HOME}/release
          zip -r /tmp/to/${{ env.RELEASE_NAME}}${{ steps.set_tag.outputs.tag }}.zip *.jar
          cd ${{env.CURRENT}}

      - name: Generate Changelog
        id: generate_changelog
        run: |
          echo "Generating changelog..."
          previous_tag=$(git describe --abbrev=0 --tags) 
          changelog=$(git log --pretty=format:"- %s (%h)" $previous_tag..HEAD)
          echo "${changelog}:::::${previous_tag}" 
          echo "LOG=${changelog}" >> $GITHUB_ENV   
          
      - name: Create Release
        id: create_release
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.NEWRELIC_BUILD_TOKEN }}
          script: |
            try {
                var changelog = `Release Changelog:\n\n${{ env.LOG }}`;
                var tag = '' + `${{ steps.set_tag.outputs.tag }}`;
                const archivePath = '/tmp/to/release_${{ steps.set_tag.outputs.tag }}.zip';
                var response = await github.rest.repos.createRelease({
                  draft:false,
                  generate_release_notes:true,
                  name:tag,
                  owner:context.repo.owner,
                  prerelease:false,
                  repo:context.repo.repo,
                  tag_name:tag,
                  body:changelog
                });

                core.exportVariable('RELEASE_ID', response.data.id);
                core.exportVariable('RELEASE_UPLOAD_URL', response.data.upload_url);
              } catch (error) {
                core.setFailed(error.message);
              }
      - name: Upload Release Artifacts
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.NEWRELIC_BUILD_TOKEN }}
        with:
          asset_path: /tmp/to/release_${{ steps.set_tag.outputs.tag }}.zip
          asset_name: release_${{ steps.set_tag.outputs.tag }}.zip
          upload_url: ${{ env.RELEASE_UPLOAD_URL }} 
          asset_content_type: application/zip
        
